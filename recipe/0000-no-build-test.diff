diff --git a/unix_build.py b/unix_build.py
index 83f916f..343e527 100755
--- a/unix_build.py
+++ b/unix_build.py
@@ -66,7 +66,7 @@ def add_python_flags(env, return_libs=False):
     else:
         libs += ['-L' + sysconfig.get_config_var('LIBDIR')]
         libs += ['-lpython' + sysconfig.get_config_var('VERSION') + getattr(sys, 'abiflags', '')]
-        libs += sysconfig.get_config_var('LINKFORSHARED').split()
+        libs += sysconfig.get_config_var('LINKFORSHARED').replace('-Wl,-stack_size,1000000', '').split()
     env.ldflags.extend(libs)
     return libs if return_libs else env
 
@@ -238,15 +238,15 @@ def build(args, build_leak_check=False):
             headers += ('gumbo/gumbo.h', )
         debug_objects.extend(build_obj(c, debug_env, headers) for c in sources)
     link(debug_objects, debug_env)
-    ldflags = add_python_flags(deepcopy(debug_env), return_libs=True)
-    if newer(TEST_EXE, *debug_objects):
-        cmd = ([debug_env.cc] + debug_env.cflags + ['test.c'] + ['-o', TEST_EXE] + ldflags)
-        run_tool(cmd)
-    if build_leak_check and newer(MEMLEAK_EXE, 'mem-leak-check.c', *debug_objects):
-        cmd = ([debug_env.cc] + debug_env.cflags + ['mem-leak-check.c'] + [
-            '-o', MEMLEAK_EXE] + debug_objects + debug_env.ldflags)
-        cmd = [x for x in cmd if x not in {'-fPIC', '-pthread', '-shared'}]
-        run_tool(cmd)
+    # ldflags = add_python_flags(deepcopy(debug_env), return_libs=True)
+    # if newer(TEST_EXE, *debug_objects):
+    #     cmd = ([debug_env.cc] + debug_env.cflags + ['test.c'] + ['-o', TEST_EXE] + ldflags)
+    #     run_tool(cmd)
+    # if build_leak_check and newer(MEMLEAK_EXE, 'mem-leak-check.c', *debug_objects):
+    #     cmd = ([debug_env.cc] + debug_env.cflags + ['mem-leak-check.c'] + [
+    #         '-o', MEMLEAK_EXE] + debug_objects + debug_env.ldflags)
+    #     cmd = [x for x in cmd if x not in {'-fPIC', '-pthread', '-shared'}]
+    #     run_tool(cmd)
     for mod in glob.glob(os.path.join(build_dir, '*' + MOD_EXT)):
         shutil.copy2(mod, freeze_dir)
     for mod in glob.glob(os.path.join('src', 'html5_parser', '*.py')):
